(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'DAL' object has no attribute 'recipe'"
p3
sS'layer'
p4
S'/home/sreya/Documents/iiit/itws2/web2py/applications/Cooking/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Helloooo!!")\n    return dict(message=T(\'Welcome to Learn2Cook!\'))\n\n@auth.requires_login()\ndef homepage():\n    totalrecs = db(db.post.id>0).count()  # number of records in table (for example)\n    showlines = 10    # number of records per page\n    if len(request.args):\n       page=int(request.args[0])\n    else:\n       page=0\n    images=db(db.post.id>0).select(limitby=(page,page+showlines),orderby=~db.post.timestamp)\n    backward=A(\'<< previous\',_href=URL(r=request,args=[page-showlines])) if page else \'<< previous\'\n    forward=A(\'next >>\',_href=URL(r=request,args=[page+showlines])) if totalrecs>page+showlines else \'next >>\'\n    nav= "Showing %d to %d out of %d records"  % (page+1, page+len(images), totalrecs)\n    return dict(images=images,backward=backward,forward=forward, nav=nav)\n\n@auth.requires_login()   \ndef show():\n    image = db.post(request.args(0,cast=int)) or redirect(URL(\'index\'))\n    db.comments.post_id.default = image.id\n    form = SQLFORM(db.comments)\n    form.vars.author=auth.user.first_name\n    if form.process().accepted:\n        response.flash = \'your comment is posted\'\n    commentss = db(db.comments.post_id==image.id).select()\n    likess=db((db.likes.post_id==image.id) & (db.likes.liker==auth.user.email)).count()\n    return dict(image=image, commentss=commentss, likess=likess, form=form)\n\n@auth.requires_login()\ndef uploadpage():\n    form=SQLFORM(db.post)\n    form.vars.author=auth.user.first_name\n    form.vars.email=auth.user.email\n    form.vars.likes=0\n    form.add_button(\'Back\', URL(\'homepage\'))\n    \n    if form.process().accepted:\n        response.flash="Your recipe is posted"\n        redirect(URL(\'default\',\'myrecipes\'))\n    return dict(form=form)\n\n@auth.requires_login()\ndef myrecipes():\n    \n    totalrecs = db(db.post.email==auth.user.email).count()  # number of records in table (for example)\n    showlines = 10     # number of records per page\n\n    if len(request.args):\n       page=int(request.args[0])\n    else:\n       page=0\n    rows=db(db.post.id>0 and db.post.email==auth.user.email).select(limitby=(page,page+showlines))\n    backward=A(\'<< previous\',_href=URL(r=request,args=[page-showlines])) if page else \'<< previous\'\n    forward=A(\'next >>\',_href=URL(r=request,args=[page+showlines])) if totalrecs>page+showlines else \'next >>\'\n    nav= "Showing %d to %d out of %d records"  % (page+1, page+len(rows), totalrecs)\n    return dict(rows=rows,backward=backward,forward=forward, nav=nav)\n\n@auth.requires_login()\ndef like():\n#     response.flash=BEAUTIFY(request.vars)\n    image = db(db.post.id==request.vars.id).select().first()\n    liked=db((db.likes.post_id==image.id) & (db.likes.liker==auth.user.email)).count()\n    if liked==0:\n        new_likes=int(image.likes)+1\n        image.likes=new_likes\n        image.update_record()\n        db.likes.insert(post_id=image.id,liker=auth.user.email)\n        response.flash="Liked"\n    else:\n        response.flash="Unliked"\n        new_likes=int(image.likes)-1\n        image.likes=new_likes\n        image.update_record()\n        db((db.likes.post_id==image.id) & (db.likes.liker==auth.user.email)).delete()\n    return str(new_likes)+" Likes"\n\n@auth.requires_login()\ndef edit():\n    image = db.post(request.args(0,cast=int)) or redirect(URL(\'index\'))\n    form = SQLFORM(db.post,image)\n    if form.process().accepted:\n        response.flash = \'your post is edited\'\n    return dict(image=image, form=form)\n\n@auth.requires_login()\ndef dele():\n    remove = db(db.post.id==request.vars.id).delete()\n    response.flash="Deleted " \n    return (T("Deleted"))\n#     redirect(URL(\'default\',\'myrecipes\'),client_side=True,extension=False,type=\'auto\')\n\n\n@auth.requires_membership("user_6")\ndef manage():\n    grid = SQLFORM.smartgrid(db.recipe,linked_tables=[\'recipe\'])\n    return dict(grid=grid)\n    \n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\nresponse._vars=response._caller(manage)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/sreya/Documents/iiit/itws2/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/sreya/Documents/iiit/itws2/web2py/applications/Cooking/controllers/default.py", line 155, in <module>\n  File "/home/sreya/Documents/iiit/itws2/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/sreya/Documents/iiit/itws2/web2py/gluon/tools.py", line 4236, in f\n    return action(*a, **b)\n  File "/home/sreya/Documents/iiit/itws2/web2py/applications/Cooking/controllers/default.py", line 114, in manage\n    grid = SQLFORM.smartgrid(db.recipe,linked_tables=[\'recipe\'])\n  File "/home/sreya/Documents/iiit/itws2/web2py/gluon/packages/dal/pydal/base.py", line 921, in __getattr__\n    return BasicStorage.__getattribute__(self, key)\nAttributeError: \'DAL\' object has no attribute \'recipe\'\n'
p11
s.