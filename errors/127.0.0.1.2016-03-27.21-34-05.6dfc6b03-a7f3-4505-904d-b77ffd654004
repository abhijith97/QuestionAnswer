(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> 'str' object is not callable"
p3
sS'layer'
p4
S'/home/sreya/Documents/iiit/itws2/web2py/applications/Cooking/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Helloooo!!")\n    return dict(message=T(\'Welcome to web2py!\'))\n\n@auth.requires_login()\ndef homepage():\n    if not request.vars.page:\n        redirect(URL(vars={\'page\':1}))\n    else:\n        page = int(request.vars.page)\n    start = (page-1)*5\n    end = page*5\n\n    images=db().select(db.post.ALL, orderby=~db.post.timestamp, limitby=(start,end))\n\n    return dict(images=images)\n\n@auth.requires_login()\ndef show():\n    image = db.post(request.args(0,cast=int)) or redirect(URL(\'index\'))\n    db.comments.post_id.default = image.id\n    form = SQLFORM(db.comments)\n    form.vars.author=auth.user.first_name\n    if form.process().accepted:\n        response.flash = \'your comment is posted\'\n    commentss = db(db.comments.post_id==image.id).select()\n    return dict(image=image, commentss=commentss, form=form)\n\n@auth.requires_login()\ndef uploadpage():\n    form=SQLFORM(db.post).process()\n    form.vars.author=auth.user.first_name\n    form.vars.email=auth.user.email\n    form.add_button(\'Back\', URL(\'homepage\'))\n    return dict(form=form)\n\n@auth.requires_login()\ndef myrecipes():\n    if not request.vars.page:\n        redirect(URL(vars={\'page\':1}))\n    else:\n        page = int(request.vars.page)\n    start = (page-1)*5\n    end = page*5\n\n    images=db(db.post.email==auth.user.email).select(db.post.ALL, orderby=~db.post.timestamp, limitby=(start,end))\n    return dict(images=images)\n\ndef like():\n    response.flash("Heya!")\n#     response.flash(request.vars.id)\n# #     image = db.post[request.vars.id]\n# #     new_likes = image.likes + 1\n# #     image.update_record(likes=new_likes)\n    image = db(db.post.id==request.vars.id).select().first()\n    new_likes=image.likes+1\n    image.likes=new_likes\n    image.update_record()\n    return str(new_likes)\n\ndef dele():\n    \n    remove = db(db.post.id==request.vars.id).delete()\n    response.flash="Hey"\n    redirect(URL())\n    return dict(remove=remove)\n\n# # @auth.requires_membership("admin")\n# def list_users():\n#     btn = lambda row: A("Edit", _href=URL(\'manage_user\', args=row.auth_user.id))\n#     db.auth_user.edit = Field.Virtual(btn)\n#     rows = db(db.auth_user).select()\n#     headers = ["ID", "Name", "Last Name", "Email", "Edit"]\n#     fields = [\'id\', \'first_name\', \'last_name\', "email", "edit"]\n#     table = TABLE(THEAD(TR(*[B(header) for header in headers])),\n#                   TBODY(*[TR(*[TD(row[field]) for field in fields]) \\\n#                         for row in rows]))\n#     table["_class"] = "table table-striped table-bordered table-condensed"\n#     return dict(table=table)\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\nresponse._vars=response._caller(like)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/sreya/Documents/iiit/itws2/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/sreya/Documents/iiit/itws2/web2py/applications/Cooking/controllers/default.py", line 135, in <module>\n  File "/home/sreya/Documents/iiit/itws2/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/sreya/Documents/iiit/itws2/web2py/applications/Cooking/controllers/default.py", line 67, in like\n    response.flash("Heya!")\nTypeError: \'str\' object is not callable\n'
p11
s.