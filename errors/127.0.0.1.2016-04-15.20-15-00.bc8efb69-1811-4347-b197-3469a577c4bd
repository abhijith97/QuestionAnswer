(dp1
S'output'
p2
S"<type 'exceptions.NameError'> global name 'Abhijith' is not defined"
p3
sS'layer'
p4
S'/home/abhijith/Documents/iiit/itws/Python/web2py/applications/QuestionAnswer/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Helloooo!!")\n    return dict(message=T(\'Welcome to Learn2Cook!\'))\n\n@auth.requires_login()\ndef homepage():\n    totalrecs = db(db.question.id>0).count()  # number of records in table (for example)\n    showlines = 25    # number of records per page\n    if len(request.args):\n       page=int(request.args[0])\n    else:\n       page=0\n    images=db(db.question.id>0).select(limitby=(page,page+showlines),orderby=~db.question.timestamp)\n    \n    backward=A(\'<< previous\',_href=URL(r=request,args=[page-showlines])) if page else \'<< previous\'\n    forward=A(\'next >>\',_href=URL(r=request,args=[page+showlines])) if totalrecs>page+showlines else \'next >>\'\n    nav= "Showing %d to %d out of %d records"  % (page+1, page+len(images), totalrecs)\n    return dict(images=images,backward=backward,forward=forward, nav=nav)\n\n@auth.requires_membership(\'Expert\')\ndef expert_homepage():\n    totalrecs = db(db.question.id>0).count()  # number of records in table (for example)\n    showlines = 25    # number of records per page\n    if len(request.args):\n       page=int(request.args[0])\n    else:\n       page=0\n    images=db(db.question.id>0).select(limitby=(page,page+showlines),orderby=~db.question.timestamp)\n    \n    backward=A(\'<< previous\',_href=URL(r=request,args=[page-showlines])) if page else \'<< previous\'\n    forward=A(\'next >>\',_href=URL(r=request,args=[page+showlines])) if totalrecs>page+showlines else \'next >>\'\n    nav= "Showing %d to %d out of %d records"  % (page+1, page+len(images), totalrecs)\n    return dict(images=images,backward=backward,forward=forward, nav=nav)\n\n@auth.requires_login()   \ndef show():\n    image = db.question(request.args(0,cast=int)) or redirect(URL(\'index\'))\n    db.answer.question_id.default = image.id\n    form = SQLFORM(db.answer)\n    form.vars.question_id=image.id\n    form.vars.author=auth.user.first_name\n    form.vars.email=auth.user.email\n    form.vars.likes=0\n\n    if form.process().accepted:\n        response.flash = \'Your answer is posted!\'\n        usr=db(db.userdata.email==auth.user.email).select().first()\n        if usr:\n            ans=int(usr.noofans)+1\n            usr.noofans=ans\n            if ans>=5 and ans<10:\n                usr.badge="Bronze"\n            elif ans>=10 and ans<15:\n                usr.badge="Silver"\n            elif ans>=15:\n                usr.badge="Gold"\n            usr.update_record()\n        else:\n            db.userdata.insert(email=auth.user.email,noofans=1,badge="Newbie")\n            \n    usr=db(db.userdata.email==auth.user.email).select().first()\n    commentss = db(db.answer.question_id==image.id).select()\n    views=db(db.expreview.question_id==image.id).select()\n    likess=db((db.likes.question_id==image.id) & (db.likes.liker==auth.user.email)).select()\n    starss=db((db.stars.question_id==image.id) & (db.stars.user==auth.user.email)).select()\n    return dict(image=image, commentss=commentss, likess=likess, starss=starss, views=views, usr=usr, form=form)\n\n@auth.requires_login()\ndef uploadpage():\n    form=SQLFORM(db.question)\n    form.vars.author=auth.user.first_name\n    form.vars.email=auth.user.email\n    form.add_button(\'Back\', URL(\'homepage\'))\n    \n    if form.process().accepted:\n        response.flash="Your question is posted!"\n        redirect(URL(\'default\',\'homepage\'))\n    return dict(form=form)\n\n\n@auth.requires_login()\ndef search():\n    dropdown=request.vars.dropdown\n    textbox=request.vars.textbox\n    tit=\'%\'+str(textbox)+\'%\'\n    if(dropdown=="Title"):\n        \n        images=db(db.question.title.like(tit, case_sensitive=False)).select(db.question.ALL, orderby=~db.question.timestamp)\n    elif(dropdown=="Description"):\n        \n        images=db(db.question.body.like(tit, case_sensitive=False)).select(db.question.ALL, orderby=~db.question.timestamp)\n        \n    else:\n\n        images=db(db.question.author.like(tit, case_sensitive=False)).select(db.question.ALL, orderby=~db.question.timestamp)\n\n    if images:\n        return dict(images=images)\n    else:\n        return dict(images="")\n\n@auth.requires_login()\ndef myquestions():\n    \n    totalrecs = db(db.question.email==auth.user.email).count()  # number of records in table (for example)\n    showlines = 5    # number of records per page\n\n    if len(request.args):\n       page=int(request.args[0])\n    else:\n       page=0\n    rows=db(db.question.id>0 and db.question.email==auth.user.email).select(limitby=(page,page+showlines),orderby=~db.question.timestamp)\n    backward=A(\'<< previous\',_href=URL(r=request,args=[page-showlines])) if page else \'<< previous\'\n    forward=A(\'next >>\',_href=URL(r=request,args=[page+showlines])) if totalrecs>page+showlines else \'next >>\'\n    nav= "Showing %d to %d out of %d records"  % (page+1, page+len(rows), totalrecs)\n    return dict(rows=rows,backward=backward,forward=forward, nav=nav)\n\n@auth.requires_login()\ndef mystarredquestions():\n    \n    totalrecs = db(db.stars.user==auth.user.email).count()  # number of records in table (for example)\n    showlines = 5    # number of records per page\n\n    if len(request.args):\n       page=int(request.args[0])\n    else:\n       page=0\n    listofques=db(db.stars.user==auth.user.email)._select(db.stars.question_id)\n    rows=db(db.question.id>0 and db.question.id.belongs(listofques)).select(limitby=(page,page+showlines),orderby=~db.question.timestamp)\n    backward=A(\'<< previous\',_href=URL(r=request,args=[page-showlines])) if page else \'<< previous\'\n    forward=A(\'next >>\',_href=URL(r=request,args=[page+showlines])) if totalrecs>page+showlines else \'next >>\'\n    nav= "Showing %d to %d out of %d records"  % (page+1, page+len(rows), totalrecs)\n    return dict(rows=rows,backward=backward,forward=forward, nav=nav)\n\n\n@auth.requires_login()\ndef like():\n    image = db(db.answer.id==request.vars.id).select().first()\n    ques=db(db.question.id==image.question_id).select().first()\n    liked=db((db.likes.ans_id==image.id) & (db.likes.liker==auth.user.email)).select().first()\n   \n    if  liked and int(liked.upordown)==-1:\n        new_likes=int(image.likes)+2\n        image.likes=new_likes\n        image.update_record()\n        rec=db((db.likes.ans_id==image.id) & (db.likes.liker==auth.user.email)).select().first()\n        rec.upordown=1\n        rec.update_record()\n    \n    elif liked and int(liked.upordown)==1:\n        new_likes=int(image.likes)-1;\n        image.likes=new_likes;\n        image.update_record()\n        db((db.likes.ans_id==image.id) & (db.likes.liker==auth.user.email)).delete()\n        \n    else:\n        new_likes=int(image.likes)+1\n        image.likes=new_likes\n        image.update_record()\n        db.likes.insert(question_id=ques.id,ans_id=image.id,liker=auth.user.email,upordown=1)\n        \n    return str(image.likes)+" Likes"\n\n@auth.requires_login()\ndef dislike():\n    image = db(db.answer.id==request.vars.id).select().first()\n    ques=db(db.question.id==image.question_id).select().first()\n    liked=db((db.likes.ans_id==image.id) & (db.likes.liker==auth.user.email)).select().first()\n   \n    if  liked and int(liked.upordown)==1:\n        new_likes=int(image.likes)-2\n        image.likes=new_likes\n        image.update_record()\n        rec=db((db.likes.ans_id==image.id) & (db.likes.liker==auth.user.email)).select().first()\n        rec.upordown=-1\n        rec.update_record()\n        \n    elif liked and int(liked.upordown)==-1:\n        new_likes=int(image.likes)+1;\n        image.likes=new_likes;\n        image.update_record()\n        db((db.likes.ans_id==image.id) & (db.likes.liker==auth.user.email)).delete()\n        \n    else:\n        new_likes=int(image.likes)-1\n        image.likes=new_likes\n        image.update_record()\n        db.likes.insert(question_id=ques.id,ans_id=image.id,liker=auth.user.email,upordown=-1)\n    return str(image.likes)+" Likes"\n\n@auth.requires_login()\ndef star():\n#     response.flash=BEAUTIFY(request.vars)\n    image = db(db.question.id==request.vars.id).select().first()\n    starred=db((db.stars.question_id==image.id) & (db.stars.user==auth.user.email)).count()\n    if starred==0:\n        db.stars.insert(question_id=image.id,user=auth.user.email)\n        response.flash="Starred"\n    else:\n        response.flash="Unstarred"\n        db((db.stars.question_id==image.id) & (db.stars.user==auth.user.email)).delete()\n    return ""\n\n@auth.requires_login()\ndef edit():\n    image = db.question(request.args(0,cast=int)) or redirect(URL(\'index\'))\n    form = SQLFORM(db.question,image)\n    if form.process().accepted:\n        response.flash = \'Your question is edited!\'\n    return dict(image=image, form=form)\n    \n    \n@auth.requires_login()\ndef dele():\n    remove = db(db.question.id==request.vars.id).delete()\n    response.flash="Deleted " \n    return (T("Deleted"))\n#     redirect(URL(\'default\',\'myrecipes\'),client_side=True,extension=False,type=\'auto\')\n\n\n@auth.requires_membership("user_7")\ndef manage():\n    grid = SQLFORM.smartgrid(db1.auth_user,linked_tables=[\'auth_user\'])\n    return dict(grid=grid)\n    \n@auth.requires_membership("user_7")\ndef managequestions():\n    grid = SQLFORM.smartgrid(db.question,linked_tables=[\'question\'])\n    return dict(grid=grid)\n    \n\ndef reviews():\n    response.flash="Hello"\n#     response.flash=BEAUTIFY(request.vars.id)\n    image = db.question(request.args(0,cast=int)) or redirect(URL(\'index\'))\n    form=SQLFORM(db.expreview)\n    form.vars.question_id=image.id\n    if form.process().accepted:\n        response.flash="Your review is added"\n    return dict(form=form)\n\n\ndef autoc():\n    text=request.post_vars.text\n    type=request.post_vars.type\n    \n    tit=str(text)+\'%\'\n\n    if(type=="Title"):\n        images=db(db.question.title.like(tit, case_sensitive=False)).select(db.question.title)\n    elif(type=="Description"):\n        images=db(db.question.body.like(tit, case_sensitive=False)).select(db.question.description)\n    else:\n        images=db(db.question.author.like(tit, case_sensitive=False)).select(db.question.author)\n\n    a=["<li>"+Abhijith+"</li>" for i in range(1,10)]\n    return "Hello"\n\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\nresponse._vars=response._caller(autoc)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/abhijith/Documents/iiit/itws/Python/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/abhijith/Documents/iiit/itws/Python/web2py/applications/QuestionAnswer/controllers/default.py", line 315, in <module>\n  File "/home/abhijith/Documents/iiit/itws/Python/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/abhijith/Documents/iiit/itws/Python/web2py/applications/QuestionAnswer/controllers/default.py", line 273, in autoc\n    a=["<li>"+Abhijith+"</li>" for i in range(1,10)]\nNameError: global name \'Abhijith\' is not defined\n'
p11
s.